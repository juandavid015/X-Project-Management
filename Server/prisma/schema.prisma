// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

type Label {
  name String
  color String
}
model Sequence {
  id String @id @map("_id")
   sequence_value Int
}
enum ProjectPermissions {
  VIEW
  EDIT
  ADMIN
}
model User {
  id      String   @id @map("_id") @db.ObjectId
  email   String   @unique
  name    String?
  projectIds String[] @db.ObjectId
  taskIds String[] @db.ObjectId
  projects Project[] @relation(name: "Members", fields: [projectIds], references: [id])
  tasks Task[] @relation(fields: [taskIds], references: [id])
  image String? 
  ownedProjects Project[] 
  projectPermissions ProjectPermission[]
  messages Message[]
  chatIds String[] @db.ObjectId
  chats Chat[] @relation("ChatMembers", fields: [chatIds], references: [id])
  ownedChats Chat[]
  discussionIds  String[] @db.ObjectId
  discussions Discussion[] @relation("DiscussionMembers", fields: [discussionIds], references: [id])
  ownedDiscussions Discussion[]
}
model Project {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String @unique
  description String?
  label String?
  tasks Task[]
  userIds String[] @db.ObjectId
  members User[] @relation(name: "Members", fields: [userIds], references: [id])
  token String?
  ownerId String @db.ObjectId 
  owner User @relation(fields: [ownerId], references: [id])
  userPermissions ProjectPermission[]
  discussions Discussion[]
}
model Task {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  title String @unique
  description String?
  status String?
  labels Label[]
  priority String?
  timeline String?
  project Project @relation(fields: [projectId], references: [id], onDelete: Cascade) 
  projectId String @db.ObjectId
  userIds String[] @db.ObjectId
  members User[] @relation(fields: [userIds], references: [id])
  indexPosition Float @unique
  imageUrl String?
}

model ProjectPermission {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  projectId String @db.ObjectId
  userId String @db.ObjectId
  role ProjectPermissions @default(VIEW)
  project Project @relation(fields: [projectId], references: [id])
  user User @relation(fields: [userId], references: [id])
}

model Message {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  replyingToId String? @db.ObjectId
  content String
  likes Int?
  attachment String?
  replies Message[] @relation("MessageReplies")
  replyingTo Message? @relation("MessageReplies", fields: [replyingToId], references: [id], onDelete: NoAction, onUpdate: NoAction)
  createdBy User @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  chatId String @db.ObjectId
  chat Chat @relation(fields: [chatId], references: [id])
}

model Chat {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  createdBy User @relation(fields: [userId], references: [id])
  messages Message[]
  userIds String[] @db.ObjectId
  members User[] @relation("ChatMembers", fields: [userIds], references: [id])
  messagePinned String? @db.ObjectId
  discussionId String? @db.ObjectId
  discussion Discussion?
  createdAt DateTime @default(now())
}
model Discussion {
  id String @id @default(auto()) @map("_id") @db.ObjectId
  userId String @db.ObjectId
  createdBy User @relation(fields: [userId], references: [id])
  title String
  description String
  subjects String[]
  chatId String @db.ObjectId @unique
  chat Chat @relation(fields: [chatId], references: [id])
  userIds String[] @db.ObjectId
  members User[] @relation("DiscussionMembers", fields: [userIds], references: [id])
  createdAt DateTime @default(now())
  projectId String @db.ObjectId
  project Project @relation(fields: [projectId], references: [id])
}



